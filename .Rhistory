arma_resid_hdfc <- residuals(arma_hdfc)
# Plot ACF of residuals
acf(arma_resid_hdfc, main = "ACF of ARMA(5,2) Residuals - HDFC")
#Residual Diagnostic
Box.test(residuals(arma_hdfc), lag = 20, type = "Ljung-Box")
#Fit GARCH(1,1) with Student-t for HDFCBANK
spec_garch_hdfc <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(5, 2), include.mean = TRUE),  # ARMA(5,2)
distribution.model = "std"
)
fit_garch_hdfc <- ugarchfit(spec = spec_garch_hdfc, data = log_returns$HDFCBANK)
show(fit_garch_hdfc)
# Convert to U[0,1]
std_vec_hdfc <- as.numeric(std_resid_hdfc)
n_hdfc <- length(std_vec_hdfc)
u_hdfc <- rank(std_vec_hdfc) / (n_hdfc + 1)
# Plot histogram
hist(u_hdfc, breaks = 30, col = "skyblue", main = "Pseudo-observations for HDFCBANK")
#Construction of Multivariate Pseudo-Observation Matrix
# 3-dimensional pseudo-observation vector:
U_matrix <- cbind(u_reliance, u_infy, u_hdfc)
colnames(U_matrix) <- c("RELIANCE", "INFY", "HDFCBANK")
library(ggplot2)
library(patchwork)
install.packages("gridExtra")
library(ggplot2)
library(gridExtra)
# Create plots
p1 <- ggplot(df_pairs, aes(x = RELIANCE, y = INFY)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs INFY") +
theme_minimal()
p2 <- ggplot(df_pairs, aes(x = RELIANCE, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs HDFCBANK") +
theme_minimal()
p3 <- ggplot(df_pairs, aes(x = INFY, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "INFY vs HDFCBANK") +
theme_minimal()
# Arrange plots in one row (or adjust ncol/nrow)
gridExtra::grid.arrange(p1, p2, p3, ncol = 3)
remove.packages("gtable")         # Completely remove the broken one
install.packages("gtable")        # Reinstall latest clean version
install.packages("gtable")
library(ggplot2)
library(gridExtra)
# Create plots
p1 <- ggplot(df_pairs, aes(x = RELIANCE, y = INFY)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs INFY") +
theme_minimal()
p2 <- ggplot(df_pairs, aes(x = RELIANCE, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs HDFCBANK") +
theme_minimal()
p3 <- ggplot(df_pairs, aes(x = INFY, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "INFY vs HDFCBANK") +
theme_minimal()
# Arrange plots in one row (or adjust ncol/nrow)
gridExtra::grid.arrange(p1, p2, p3, ncol = 3)
library(ggplot2)
library(grid)
# Create plots
p1 <- ggplot(df_pairs, aes(x = RELIANCE, y = INFY)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs INFY") +
theme_minimal()
p2 <- ggplot(df_pairs, aes(x = RELIANCE, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs HDFCBANK") +
theme_minimal()
p3 <- ggplot(df_pairs, aes(x = INFY, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "INFY vs HDFCBANK") +
theme_minimal()
# Arrange using viewports (2x2 style layout manually)
grid.newpage()
pushViewport(viewport(layout = grid.layout(1, 3)))  # 1 row, 3 columns
print(p1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
library(copula)
library(ggplot2)
#Plot Each Pair (RELIANCE–INFY, RELIANCE–HDFCBANK, INFY–HDFCBANK)
df_pairs <- as.data.frame(U_matrix)
# RELIANCE vs INFY
ggplot(df_pairs, aes(x = RELIANCE, y = INFY)) +
geom_point(alpha = 0.5) +
labs(title = "Pseudo-observations: RELIANCE vs INFY", x = "RELIANCE", y = "INFY") +
theme_minimal()
library(copula)
library(ggplot2)
#Plot Each Pair (RELIANCE–INFY, RELIANCE–HDFCBANK, INFY–HDFCBANK)
df_pairs <- as.data.frame(U_matrix)
# RELIANCE vs INFY
ggplot(df_pairs, aes(x = RELIANCE, y = INFY)) +
geom_point(alpha = 0.5) +
labs(title = "Pseudo-observations: RELIANCE vs INFY", x = "RELIANCE", y = "INFY") +
theme_minimal()
# Step A: Find your library path
.libPaths()
unlink("/Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/library/gtable", recursive = TRUE)
install.packages("gtable")
install.packages("gtable")
library(ggplot2)
library(gridExtra)
# Create plots
p1 <- ggplot(df_pairs, aes(x = RELIANCE, y = INFY)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs INFY") +
theme_minimal()
p2 <- ggplot(df_pairs, aes(x = RELIANCE, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs HDFCBANK") +
theme_minimal()
p3 <- ggplot(df_pairs, aes(x = INFY, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "INFY vs HDFCBANK") +
theme_minimal()
# Arrange plots in one row (or adjust ncol/nrow)
gridExtra::grid.arrange(p1, p2, p3, ncol = 3)
install.packages("gtable")
library(gtable)
library(ggplot2)
library(gridExtra)
library(ggplot2)
library(gridExtra)
# Create plots
p1 <- ggplot(df_pairs, aes(x = RELIANCE, y = INFY)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs INFY") +
theme_minimal()
p2 <- ggplot(df_pairs, aes(x = RELIANCE, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs HDFCBANK") +
theme_minimal()
p3 <- ggplot(df_pairs, aes(x = INFY, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "INFY vs HDFCBANK") +
theme_minimal()
# Arrange plots in one row (or adjust ncol/nrow)
gridExtra::grid.arrange(p1, p2, p3, ncol = 3)
library(quantmod)
library(rugarch)
library(tseries)
library(forecast)
tickers <- c("RELIANCE.NS", "INFY.NS", "HDFCBANK.NS")
getSymbols(tickers, src = "yahoo", from = "2015-01-01", to = Sys.Date())
# Extract adjusted close prices and merge
prices <- merge(
Ad(RELIANCE.NS),
Ad(INFY.NS),
Ad(HDFCBANK.NS)
)
colnames(prices) <- c("RELIANCE", "INFY", "HDFCBANK")
# Remove any rows with NAs
prices <- na.omit(prices)
# Plot to visualize prices
plot(prices, main = "Adjusted Closing Prices", multi.panel = TRUE)
# Compute daily log returns
log_returns <- na.omit(diff(log(prices)))
# Check output
head(log_returns)
# Plot each return series
par(mfrow = c(3, 1))
plot(log_returns$RELIANCE, main = "RELIANCE Log Returns")
plot(log_returns$INFY, main = "INFY Log Returns")
plot(log_returns$HDFCBANK, main = "HDFCBANK Log Returns")
par(mfrow = c(1, 1))  # reset layout
# for RELIANCE
par(mfrow = c(1, 2))  # 1 row, 2 columns
acf(log_returns$RELIANCE, main = "ACF of RELIANCE Returns")
pacf(log_returns$RELIANCE, main = "PACF of RELIANCE Returns")
par(mfrow = c(1, 1))  # reset to single plot afterward
library(forecast)
arma_model <- auto.arima(log_returns$RELIANCE, stationary = TRUE, seasonal = FALSE)
summary(arma_model)
manual_arma <- Arima(log_returns$RELIANCE, order = c(1, 0, 1))
summary(manual_arma)
Box.test(residuals(manual_arma), lag = 20, type = "Ljung-Box")
arma_resid <- residuals(arma_model)
acf(arma_resid, main = "ACF of ARMA(0,0) Residuals")
Box.test(arma_resid, lag = 20, type = "Ljung-Box")
arma_better <- auto.arima(log_returns$RELIANCE, max.p = 3, max.q = 3,
stationary = TRUE, seasonal = FALSE,
stepwise = FALSE, approximation = FALSE)
summary(arma_better)
Box.test(residuals(arma_better), lag = 20, type = "Ljung-Box")
library(rugarch)
garch_spec <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(3, 2), include.mean = TRUE),
distribution.model = "std"  # 'std' = Student-t
)
garch_fit <- ugarchfit(spec = garch_spec, data = log_returns$RELIANCE)
show(garch_fit)
# Extract standardized residuals (z_t = ε_t / σ_t)
std_resid <- residuals(garch_fit, standardize = TRUE)
plot(std_resid, main = "Standardized Residuals - RELIANCE")
std_vec <- as.numeric(std_resid)  # flatten to numeric
n <- length(std_vec)
u_reliance <- rank(std_vec) / (n + 1)
# Plot histogram
hist(u_reliance, breaks = 30, col = "skyblue", main = "Pseudo-observations for RELIANCE")
#Step 1: Plot ACF and PACF of INFY Returns
par(mfrow = c(1, 2))
acf(log_returns$INFY, main = "ACF of INFY Returns")
pacf(log_returns$INFY, main = "PACF of INFY Returns")
par(mfrow = c(1, 1))
#Step 2: Fit ARMA Model to INFY
arma_infy <- auto.arima(log_returns$INFY, stationary = TRUE, seasonal = FALSE)
summary(arma_infy)
#Step 3: Residual Checks – INFY
arma_resid_infy <- residuals(arma_infy)
# Plot ACF of residuals
acf(arma_resid_infy, main = "ACF of ARMA(0,0) Residuals - INFY")
# Ljung-Box test for autocorrelation
Box.test(arma_resid_infy, lag = 20, type = "Ljung-Box")
#Solution: Fit a Better ARMA(p,q) Model for INFY with more exhaustive search
arma_better_infy <- auto.arima(
log_returns$INFY,
stationary = TRUE, seasonal = FALSE,
max.p = 3, max.q = 3,
stepwise = FALSE, approximation = FALSE
)
summary(arma_better_infy)
#Residual Diagnostic-Let’s confirm this model has white noise residuals.
Box.test(residuals(arma_better_infy), lag = 20, type = "Ljung-Box")
#Fit GARCH(1,1) with Student-t for INFY
spec_garch_infy <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(3, 2), include.mean = FALSE),  # zero mean in ARIMA
distribution.model = "std"
)
fit_garch_infy <- ugarchfit(spec = spec_garch_infy, data = log_returns$INFY)
show(fit_garch_infy)
std_resid_infy <- residuals(fit_garch_infy, standardize = TRUE)
plot(std_resid_infy, main = "Standardized Residuals - INFY")
# Convert to [0,1]
std_vec_infy <- as.numeric(std_resid_infy)
n_infy <- length(std_vec_infy)
u_infy <- rank(std_vec_infy) / (n_infy + 1)
# Plot histogram
hist(u_infy, breaks = 30, col = "skyblue", main = "Pseudo-observations for INFY")
# HDFCBANK Univariate Modeling
#Plot ACF/PACF of log_returns$HDFCBANK
par(mfrow = c(1, 2))
acf(log_returns$HDFCBANK, main = "ACF of HDFCBANK Returns")
pacf(log_returns$HDFCBANK, main = "PACF of HDFCBANK Returns")
par(mfrow = c(1, 1))
#Fit ARMA Model for HDFCBANK
arma_hdfc <- auto.arima(log_returns$HDFCBANK, stationary = TRUE, seasonal = FALSE)
summary(arma_hdfc)
#Step 3: Residual Checks – HDFC
arma_resid_hdfc <- residuals(arma_hdfc)
# Plot ACF of residuals
acf(arma_resid_hdfc, main = "ACF of ARMA(5,2) Residuals - HDFC")
#Residual Diagnostic
Box.test(residuals(arma_hdfc), lag = 20, type = "Ljung-Box")
#Fit GARCH(1,1) with Student-t for HDFCBANK
spec_garch_hdfc <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(5, 2), include.mean = TRUE),  # ARMA(5,2)
distribution.model = "std"
)
fit_garch_hdfc <- ugarchfit(spec = spec_garch_hdfc, data = log_returns$HDFCBANK)
show(fit_garch_hdfc)
# Convert to U[0,1]
std_vec_hdfc <- as.numeric(std_resid_hdfc)
n_hdfc <- length(std_vec_hdfc)
u_hdfc <- rank(std_vec_hdfc) / (n_hdfc + 1)
# Plot histogram
hist(u_hdfc, breaks = 30, col = "skyblue", main = "Pseudo-observations for HDFCBANK")
#Construction of Multivariate Pseudo-Observation Matrix
# 3-dimensional pseudo-observation vector:
U_matrix <- cbind(u_reliance, u_infy, u_hdfc)
colnames(U_matrix) <- c("RELIANCE", "INFY", "HDFCBANK")
library(gtable)
library(ggplot2)
library(gridExtra)
# Create plots
p1 <- ggplot(df_pairs, aes(x = RELIANCE, y = INFY)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs INFY") +
theme_minimal()
p2 <- ggplot(df_pairs, aes(x = RELIANCE, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "RELIANCE vs HDFCBANK") +
theme_minimal()
p3 <- ggplot(df_pairs, aes(x = INFY, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "INFY vs HDFCBANK") +
theme_minimal()
# Arrange plots in one row (or adjust ncol/nrow)
gridExtra::grid.arrange(p1, p2, p3, ncol = 3)
library(copula)
library(ggplot2)
#Plot Each Pair (RELIANCE–INFY, RELIANCE–HDFCBANK, INFY–HDFCBANK)
df_pairs <- as.data.frame(U_matrix)
# RELIANCE vs INFY
ggplot(df_pairs, aes(x = RELIANCE, y = INFY)) +
geom_point(alpha = 0.5) +
labs(title = "Pseudo-observations: RELIANCE vs INFY", x = "RELIANCE", y = "INFY") +
theme_minimal()
# RELIANCE vs HDFCBANK
ggplot(df_pairs, aes(x = RELIANCE, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "Pseudo-observations: RELIANCE vs HDFCBANK", x = "RELIANCE", y = "HDFCBANK") +
theme_minimal()
# INFY vs HDFCBANK
ggplot(df_pairs, aes(x = INFY, y = HDFCBANK)) +
geom_point(alpha = 0.5) +
labs(title = "Pseudo-observations: INFY vs HDFCBANK", x = "INFY", y = "HDFCBANK") +
theme_minimal()
#Step 2 – Estimate Dependence Measures-We’ll now compute:Kendall’s tau (nonparametric concordance),Spearman’s rho (rank correlation)
# Dependence measures
kendall_relinfy  <- cor(U_matrix[,1], U_matrix[,2], method = "kendall")
kendall_relhdfc  <- cor(U_matrix[,1], U_matrix[,3], method = "kendall")
kendall_infyhdfc <- cor(U_matrix[,2], U_matrix[,3], method = "kendall")
spearman_relinfy  <- cor(U_matrix[,1], U_matrix[,2], method = "spearman")
spearman_relhdfc  <- cor(U_matrix[,1], U_matrix[,3], method = "spearman")
spearman_infyhdfc <- cor(U_matrix[,2], U_matrix[,3], method = "spearman")
# Display
cat("Kendall's tau:\n")
cat("RELIANCE–INFY:     ", kendall_relinfy, "\n")
cat("RELIANCE–HDFCBANK: ", kendall_relhdfc, "\n")
cat("INFY–HDFCBANK:     ", kendall_infyhdfc, "\n\n")
cat("Spearman's rho:\n")
cat("RELIANCE–INFY:     ", spearman_relinfy, "\n")
cat("RELIANCE–HDFCBANK: ", spearman_relhdfc, "\n")
cat("INFY–HDFCBANK:     ", spearman_infyhdfc, "\n")
#Estimate Tail Dependence Coefficients (λₗ, λᵤ)
#Upper tail dependence (λᵤ): tendency for large values to co-occur
#Lower tail dependence (λₗ): tendency for small values to co-occur
tail_dep_empirical <- function(u, v, q = 0.95) {
lambda_U <- mean((u > q) & (v > q)) / (1 - q)
lambda_L <- mean((u < (1 - q)) & (v < (1 - q))) / (1 - q)
return(list(lambda_U = lambda_U, lambda_L = lambda_L))
}
# RELIANCE – INFY
tail_relinfy <- tail_dep_empirical(U_matrix[,1], U_matrix[,2])
# RELIANCE – HDFCBANK
tail_relhdfc <- tail_dep_empirical(U_matrix[,1], U_matrix[,3])
# INFY – HDFCBANK
tail_infyhdfc <- tail_dep_empirical(U_matrix[,2], U_matrix[,3])
# Display results
cat("Tail Dependence Estimates (q = 0.95):\n")
cat("RELIANCE–INFY:      λ_U =", tail_relinfy$lambda_U, ", λ_L =", tail_relinfy$lambda_L, "\n")
cat("RELIANCE–HDFCBANK:  λ_U =", tail_relhdfc$lambda_U, ", λ_L =", tail_relhdfc$lambda_L, "\n")
cat("INFY–HDFCBANK:      λ_U =", tail_infyhdfc$lambda_U, ", λ_L =", tail_infyhdfc$lambda_L, "\n")
##Fit Parametric Copulas (Clayton, Gumbel, Gaussian, t)
# Goal:Fit 4 copula models for each asset pair and compare:
#Clayton → captures lower tail dependence,
#Gumbel → captures upper tail dependence,
#Gaussian → symmetric, no tail dependence,
#t-Copula → symmetric with tail dependence....We’ll fit models using maximum likelihood estimation via the {copula} package.
library(copula)
##Create a matrix of pseudo-observations
u1 <- U_matrix[,1]  # RELIANCE
u2 <- U_matrix[,2]  # INFY
U12 <- cbind(u1, u2)
##Fit Different Copulas
# Clayton Copula
fit_clayton <- fitCopula(claytonCopula(dim=2), data = U12, method = "ml")
# Gumbel Copula
fit_gumbel <- fitCopula(gumbelCopula(dim=2), data = U12, method = "ml")
# Gaussian Copula
fit_normal <- fitCopula(normalCopula(dim=2), data = U12, method = "ml")
# t Copula (estimate df too)
fit_t <- fitCopula(tCopula(dim=2, df.fixed=FALSE), data = U12, method = "ml")
#View Parameter Estimates and Log-Likelihoods
loglik_clayton <- logLik(fit_clayton)
loglik_gumbel  <- logLik(fit_gumbel)
loglik_normal  <- logLik(fit_normal)
loglik_t       <- logLik(fit_t)
cat("Log-Likelihoods (RELIANCE–INFY):\n")
cat("Clayton:  ", loglik_clayton, "\n")
cat("Gumbel:   ", loglik_gumbel, "\n")
cat("Gaussian: ", loglik_normal, "\n")
cat("t-Copula: ", loglik_t, "\n")
#Fit Copulas for RELIANCE – HDFCBANK next.
u1 <- U_matrix[,1]  # RELIANCE
u3 <- U_matrix[,3]  # HDFCBANK
U13 <- cbind(u1, u3)
fit_clayton_13 <- fitCopula(claytonCopula(dim=2), data = U13, method = "ml")
fit_gumbel_13  <- fitCopula(gumbelCopula(dim=2), data = U13, method = "ml")
fit_normal_13  <- fitCopula(normalCopula(dim=2), data = U13, method = "ml")
fit_t_13       <- fitCopula(tCopula(dim=2, df.fixed=FALSE), data = U13, method = "ml")
# Log-likelihoods
logLik(fit_clayton_13)
logLik(fit_gumbel_13)
logLik(fit_normal_13)
logLik(fit_t_13)
#Fit Copulas for INFY – HDFCBANK next.
u2 <- U_matrix[,2]  # INFY
u3 <- U_matrix[,3]  # HDFCBANK
U23 <- cbind(u2, u3)
# Fit four copulas
fit_clayton_23 <- fitCopula(claytonCopula(dim=2), data = U23, method = "ml")
fit_gumbel_23  <- fitCopula(gumbelCopula(dim=2), data = U23, method = "ml")
fit_normal_23  <- fitCopula(normalCopula(dim=2), data = U23, method = "ml")
fit_t_23       <- fitCopula(tCopula(dim=2, df.fixed=FALSE), data = U23, method = "ml")
# Get log-likelihoods
logLik(fit_clayton_23)
logLik(fit_gumbel_23)
logLik(fit_normal_23)
logLik(fit_t_23)
#Goodness-of-Fit (GOF) Tests for Copulas---We’ll use:
#Cramér–von Mises (CvM)
#Kolmogorov–Smirnov (KS)
#To test:“Does the fitted copula describe the observed pseudo-observations well?”
library(VineCopula)
#GOF Test for RELIANCE–INFY
## Extract pseudo-observations
U12 <- cbind(U_matrix[,1], U_matrix[,2])
# Fit best copula using VineCopula functions
gof_t12 <- BiCopGofTest(U12[,1], U12[,2], family = 2)  # family 2 = t-copula
# Compute daily log returns
log_returns <- na.omit(diff(log(prices)))
# Check output
head(log_returns)
# 3 rows, 2 columns
par(mfrow = c(3, 2))
# RELIANCE
acf(log_returns$RELIANCE, main = "ACF of RELIANCE Returns")
pacf(log_returns$RELIANCE, main = "PACF of RELIANCE Returns")
# INFY
acf(log_returns$INFY, main = "ACF of INFY Returns")
pacf(log_returns$INFY, main = "PACF of INFY Returns")
# HDFCBANK
acf(log_returns$HDFCBANK, main = "ACF of HDFCBANK Returns")
pacf(log_returns$HDFCBANK, main = "PACF of HDFCBANK Returns")
# Reset plotting layout
par(mfrow = c(1, 1))
#CONTOUR PLOT for RELIANCE-HDFCBANK pair
#Extract pseudo-observations
u1 <- U_matrix[, 1]  # RELIANCE
u3 <- U_matrix[, 3]  # HDFCBANK
U13 <- cbind(u1, u3)
# Fit t-Copula
fit_13 <- fitCopula(tCopula(dim=2, df.fixed=FALSE), data = U13, method = "ml")
# Set outer margin to avoid title clipping
par(oma = c(0, 0, 3, 0))
# Contour Plot
filled.contour(
x = seq(0.01, 0.99, length.out = 50),
y = seq(0.01, 0.99, length.out = 50),
z = outer(seq(0.01, 0.99, length.out = 50), seq(0.01, 0.99, length.out = 50),
Vectorize(function(u, v) dCopula(cbind(u, v), fit_13@copula))),
color.palette = terrain.colors,
main = "Density Contour –Fitted t-Copula (RELIANCE–HDFCBANK)",
xlab = "u1 (RELIANCE)", ylab = "u3 (HDFCBANK)"
)
#CONTOUR PLOT for RELIANCE-HDFCBANK pair
#Extract pseudo-observations
u1 <- U_matrix[, 1]  # RELIANCE
u3 <- U_matrix[, 3]  # HDFCBANK
U13 <- cbind(u1, u3)
# Fit t-Copula
fit_13 <- fitCopula(tCopula(dim=2, df.fixed=FALSE), data = U13, method = "ml")
# Set outer margin to avoid title clipping
par(oma = c(0, 0, 3, 0))
# Contour Plot
filled.contour(
x = seq(0.01, 0.99, length.out = 50),
y = seq(0.01, 0.99, length.out = 50),
z = outer(seq(0.01, 0.99, length.out = 50), seq(0.01, 0.99, length.out = 50),
Vectorize(function(u, v) dCopula(cbind(u, v), fit_13@copula))),
color.palette = terrain.colors,
main = "Density Contour–Fitted t-Cop(RELIANCE–HDFCBANK)",
xlab = "u1 (RELIANCE)", ylab = "u3 (HDFCBANK)"
)
#CONTOUR PLOT for RELIANCE-HDFCBANK pair
#Extract pseudo-observations
u1 <- U_matrix[, 1]  # RELIANCE
u3 <- U_matrix[, 3]  # HDFCBANK
U13 <- cbind(u1, u3)
# Fit t-Copula
fit_13 <- fitCopula(tCopula(dim=2, df.fixed=FALSE), data = U13, method = "ml")
# Set outer margin to avoid title clipping
par(oma = c(0, 0, 3, 0))
# Contour Plot
filled.contour(
x = seq(0.01, 0.99, length.out = 50),
y = seq(0.01, 0.99, length.out = 50),
z = outer(seq(0.01, 0.99, length.out = 50), seq(0.01, 0.99, length.out = 50),
Vectorize(function(u, v) dCopula(cbind(u, v), fit_13@copula))),
color.palette = terrain.colors,
main = "Density–Fitted t-Cop(RELIANCE–HDFCBANK)",
xlab = "u1 (RELIANCE)", ylab = "u3 (HDFCBANK)"
)
# 3 rows, 2 columns
par(mfrow = c(3, 2))
# RELIANCE
acf(log_returns$RELIANCE, main = "ACF of RELIANCE Returns")
pacf(log_returns$RELIANCE, main = "PACF of RELIANCE Returns")
# INFY
acf(log_returns$INFY, main = "ACF of INFY Returns")
pacf(log_returns$INFY, main = "PACF of INFY Returns")
# HDFCBANK
acf(log_returns$HDFCBANK, main = "ACF of HDFCBANK Returns")
pacf(log_returns$HDFCBANK, main = "PACF of HDFCBANK Returns")
# Reset plotting layout
par(mfrow = c(1, 1))
knit_with_parameters("~/Documents/II SEMESTER/DATASCIENCE IN INSURANCE/Project/Copula-Dependence-Modeling-NSE/Project_work_24_25.Rmd")
knit_with_parameters("~/Documents/II SEMESTER/DATASCIENCE IN INSURANCE/Project/Copula-Dependence-Modeling-NSE/Project_work_24_25.Rmd")
rmarkdown::render("Project_work_24_25.Rmd", output_format = "pdf_document")
getwd()
setwd("/Users/vishal/Documents/II SEMESTER/DATASCIENCE IN INSURANCE/Project/Copula-Dependence-Modeling-NSE/")
rmarkdown::render("Project_work_24_25.Rmd", output_format = "pdf_document")
warnings()
